{"version":3,"sources":["logo.svg","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoList","console","log","state","listOfTodos","status","value","newTask","handleChange","bind","AddToList","DeleteFromList","event","preventDefault","newitem","this","setState","idx","prevState","filter","val","i","listOfTodosJson","JSON","parse","stringify","target","className","style","fontSize","color","Form","inline","onSubmit","margin","Control","size","placeholder","onChange","Button","type","ListGroup","map","element","Item","variant","key","onClick","e","MoveToDone","float","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,yMCiF5BC,E,YA3EX,aAAc,IAAD,6BACTC,QAAQC,IAAI,UACZ,+CACKC,MAAQ,CACTC,YAAY,CAAC,CAACC,OAAO,UAAUC,MAAM,OACrC,CAACD,OAAO,UAAUC,MAAM,SACxB,CAACD,OAAO,UAAUC,MAAM,SACxBC,QAAU,MAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBAXb,E,uEAeHG,GACNA,EAAMC,iBACN,IAAMC,EAAU,CAACT,OAAO,UAAUC,MAAMS,KAAKZ,MAAMI,SACnDQ,KAAKC,SAAS,CACVZ,YAAY,GAAD,mBAAMW,KAAKZ,MAAMC,aAAjB,CAA6BU,IACxCP,QAAS,O,qCAIFK,EAAMK,GACjBL,EAAMC,iBACNE,KAAKC,UAAS,SAAAE,GAAS,MAAK,CAC5Bd,YAAac,EAAUd,YAAYe,QAAO,SAACC,EAAIC,GAAL,OAAWA,GAAKJ,W,iCAGlDL,EAAMK,GACdL,EAAMC,iBACN,IAAIS,EAAkBC,KAAKC,MAAMD,KAAKE,UAAUV,KAAKZ,MAAMC,cAC3DkB,EAAgBL,GAAKZ,OAAS,OAC9BU,KAAKC,SAAS,CACVZ,YAAYkB,M,mCAIPV,GACTG,KAAKC,SAAS,CAACT,QAASK,EAAMc,OAAOpB,U,+BAGhC,IAAD,OACJ,OACI,yBAAKqB,UAAU,IACX,uBAAGC,MAAO,CAAEC,SAAS,GAAIC,MAAO,UAAhC,+BAEA,kBAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,SAAUlB,KAAKL,UAAakB,MAAO,CAACM,OAAQ,SACrD,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,KAAK9B,MAAQS,KAAKZ,MAAMI,QAC3C8B,YAAY,OAEZC,SAAUvB,KAAKP,eACf,kBAAC+B,EAAA,EAAD,CAAQC,KAAK,SAAUZ,MAAO,CAACM,OAAQ,QAAvC,QAIJ,6BACI,kBAACO,EAAA,EAAD,KAEA1B,KAAKZ,MAAMC,YAAYsC,KAAI,SAACC,EAAQ1B,GAChC,OAAO,kBAACwB,EAAA,EAAUG,KAAX,CAAgBC,QAAyB,WAAhBF,EAAQtC,OAAkB,UAAU,OAAQuB,MAAO,CAAEC,SAAS,GAAIC,MAAO,SAAYgB,IAAK7B,GAC7G0B,EAAQrC,MAET,kBAACiC,EAAA,EAAD,CAAQQ,QAAW,SAACC,GAAD,OAAK,EAAKC,WAAWD,EAAE/B,IAAOW,MAAO,CAACsB,MAAO,SAAhE,YAEA,kBAACX,EAAA,EAAD,CAAQQ,QAAW,SAACC,GAAD,OAAK,EAAKrC,eAAeqC,EAAE/B,IAAOW,MAAO,CAACsB,MAAO,UAApE,kB,GAnEbC,aCWRC,MAVf,WACE,OACE,yBAAKzB,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,SCEc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3bd1d8f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nclass TodoList extends Component {\n    constructor(){\n        console.log('reset');\n        super()\n        this.state = {\n            listOfTodos:[{status:'pending',value:'Eat'},\n            {status:'pending',value:'Sleep'},\n            {status:'pending',value:'Code'}],\n            newTask : null\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.AddToList = this.AddToList.bind(this);\n        this.DeleteFromList = this.DeleteFromList.bind(this);\n\n    }\n\n    AddToList(event){\n        event.preventDefault();\n        const newitem = {status:'pending',value:this.state.newTask};\n        this.setState({ \n            listOfTodos: [...this.state.listOfTodos,newitem],\n            newTask :\"\"\n          });\n    }\n\n    DeleteFromList(event,idx){\n        event.preventDefault();\n        this.setState(prevState => ({\n        listOfTodos: prevState.listOfTodos.filter((val,i) => i != idx )\n       }));\n     }\n     MoveToDone(event,idx){\n        event.preventDefault();\n        let listOfTodosJson = JSON.parse(JSON.stringify(this.state.listOfTodos))\n        listOfTodosJson[idx].status = \"Done\"\n        this.setState({\n            listOfTodos:listOfTodosJson \n        });\n     }\n\n    handleChange(event) {\n        this.setState({newTask: event.target.value});\n      }\n\n    render(){\n        return (\n            <div className=\"\">\n                <p style={{ fontSize:17, color: 'white' }} >Todo list to keep me bussy </p>\n              \n                <Form inline onSubmit={this.AddToList}   style={{margin: '20px'}}  >\n                    <Form.Control size=\"lg\" value={ this.state.newTask } \n                    placeholder='Todo'\n\n                    onChange={this.handleChange}></Form.Control>\n                    <Button type=\"submit\"  style={{margin: '5px'}}>Add</Button>\n                </Form>\n\n               \n                <div>\n                    <ListGroup >\n                    { \n                    this.state.listOfTodos.map((element,idx)=>{\n                        return <ListGroup.Item variant={element.status=='pending'?'warning':'info'} style={{ fontSize:15, color: 'black' }}  key={idx}>   \n                                    {element.value} \n\n                                    <Button onClick = {(e)=>this.MoveToDone(e,idx)}  style={{float: 'left' }} > Finish </Button>\n\n                                    <Button onClick = {(e)=>this.DeleteFromList(e,idx)}  style={{float: 'right' }} > X </Button>\n                                </ListGroup.Item>\n                    })}\n                </ListGroup>\n                </div>\n            </div>\n        )\n    }\n}\nexport default TodoList","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TodoList from './TodoList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <TodoList/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}